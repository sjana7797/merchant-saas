// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: ecom.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "ecom";

export interface GetProductRequest {
  productId: string;
}

export interface GetHealthRequest {
}

export interface GetProductResponse {
  id: string;
  name: string;
  description: string;
  slug: string;
  orgId: string;
}

export interface GetHealthResponse {
  message: string;
}

function createBaseGetProductRequest(): GetProductRequest {
  return { productId: "" };
}

export const GetProductRequest: MessageFns<GetProductRequest> = {
  encode(message: GetProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductRequest {
    return { productId: isSet(object.productId) ? globalThis.String(object.productId) : "" };
  },

  toJSON(message: GetProductRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProductRequest>): GetProductRequest {
    return GetProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProductRequest>): GetProductRequest {
    const message = createBaseGetProductRequest();
    message.productId = object.productId ?? "";
    return message;
  },
};

function createBaseGetHealthRequest(): GetHealthRequest {
  return {};
}

export const GetHealthRequest: MessageFns<GetHealthRequest> = {
  encode(_: GetHealthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHealthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHealthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetHealthRequest {
    return {};
  },

  toJSON(_: GetHealthRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetHealthRequest>): GetHealthRequest {
    return GetHealthRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetHealthRequest>): GetHealthRequest {
    const message = createBaseGetHealthRequest();
    return message;
  },
};

function createBaseGetProductResponse(): GetProductResponse {
  return { id: "", name: "", description: "", slug: "", orgId: "" };
}

export const GetProductResponse: MessageFns<GetProductResponse> = {
  encode(message: GetProductResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.slug !== "") {
      writer.uint32(34).string(message.slug);
    }
    if (message.orgId !== "") {
      writer.uint32(42).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProductResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProductResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProductResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
    };
  },

  toJSON(message: GetProductResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetProductResponse>): GetProductResponse {
    return GetProductResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProductResponse>): GetProductResponse {
    const message = createBaseGetProductResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.slug = object.slug ?? "";
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetHealthResponse(): GetHealthResponse {
  return { message: "" };
}

export const GetHealthResponse: MessageFns<GetHealthResponse> = {
  encode(message: GetHealthResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetHealthResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHealthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHealthResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: GetHealthResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<GetHealthResponse>): GetHealthResponse {
    return GetHealthResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHealthResponse>): GetHealthResponse {
    const message = createBaseGetHealthResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export type EcomServiceService = typeof EcomServiceService;
export const EcomServiceService = {
  getProduct: {
    path: "/ecom.EcomService/GetProduct",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProductRequest): Buffer => Buffer.from(GetProductRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetProductRequest => GetProductRequest.decode(value),
    responseSerialize: (value: GetProductResponse): Buffer => Buffer.from(GetProductResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetProductResponse => GetProductResponse.decode(value),
  },
  getHealth: {
    path: "/ecom.EcomService/GetHealth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetHealthRequest): Buffer => Buffer.from(GetHealthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetHealthRequest => GetHealthRequest.decode(value),
    responseSerialize: (value: GetHealthResponse): Buffer => Buffer.from(GetHealthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetHealthResponse => GetHealthResponse.decode(value),
  },
} as const;

export interface EcomServiceServer extends UntypedServiceImplementation {
  getProduct: handleUnaryCall<GetProductRequest, GetProductResponse>;
  getHealth: handleUnaryCall<GetHealthRequest, GetHealthResponse>;
}

export interface EcomServiceClient extends Client {
  getProduct(
    request: GetProductRequest,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  getProduct(
    request: GetProductRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetProductResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
}

export const EcomServiceClient = makeGenericClientConstructor(EcomServiceService, "ecom.EcomService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EcomServiceClient;
  service: typeof EcomServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
