// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { GetHealthRequest, GetHealthResponse } from "./health";
import { PaginatedRequest, PaginatedRequestWithOrg } from "./paginated";

export const protobufPackage = "user";

export interface GetUsersResponse {
  users: GetUserResponse[];
  totalCount: number;
  page: number;
  nextCursor?: number | undefined;
}

export interface GetUserRequest {
  userId: string;
}

export interface GetCustomerRequest {
  userId: string;
  orgId: string;
}

export interface GetUserResponse {
  id: string;
  name: string;
  email: string;
  createdAt: string;
  updatedAt: string;
}

function createBaseGetUsersResponse(): GetUsersResponse {
  return { users: [], totalCount: 0, page: 0, nextCursor: undefined };
}

export const GetUsersResponse: MessageFns<GetUsersResponse> = {
  encode(message: GetUsersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      GetUserResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.nextCursor !== undefined) {
      writer.uint32(32).int32(message.nextCursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(GetUserResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.nextCursor = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsersResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => GetUserResponse.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      nextCursor: isSet(object.nextCursor) ? globalThis.Number(object.nextCursor) : undefined,
    };
  },

  toJSON(message: GetUsersResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => GetUserResponse.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.nextCursor !== undefined) {
      obj.nextCursor = Math.round(message.nextCursor);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUsersResponse>): GetUsersResponse {
    return GetUsersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUsersResponse>): GetUsersResponse {
    const message = createBaseGetUsersResponse();
    message.users = object.users?.map((e) => GetUserResponse.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.nextCursor = object.nextCursor ?? undefined;
    return message;
  },
};

function createBaseGetUserRequest(): GetUserRequest {
  return { userId: "" };
}

export const GetUserRequest: MessageFns<GetUserRequest> = {
  encode(message: GetUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserRequest>): GetUserRequest {
    return GetUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserRequest>): GetUserRequest {
    const message = createBaseGetUserRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetCustomerRequest(): GetCustomerRequest {
  return { userId: "", orgId: "" };
}

export const GetCustomerRequest: MessageFns<GetCustomerRequest> = {
  encode(message: GetCustomerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.orgId !== "") {
      writer.uint32(18).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCustomerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCustomerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCustomerRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
    };
  },

  toJSON(message: GetCustomerRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetCustomerRequest>): GetCustomerRequest {
    return GetCustomerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCustomerRequest>): GetCustomerRequest {
    const message = createBaseGetCustomerRequest();
    message.userId = object.userId ?? "";
    message.orgId = object.orgId ?? "";
    return message;
  },
};

function createBaseGetUserResponse(): GetUserResponse {
  return { id: "", name: "", email: "", createdAt: "", updatedAt: "" };
}

export const GetUserResponse: MessageFns<GetUserResponse> = {
  encode(message: GetUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(42).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: GetUserResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create(base?: DeepPartial<GetUserResponse>): GetUserResponse {
    return GetUserResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUserResponse>): GetUserResponse {
    const message = createBaseGetUserResponse();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  getUsers: {
    path: "/user.UserService/GetUsers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PaginatedRequest): Buffer => Buffer.from(PaginatedRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PaginatedRequest => PaginatedRequest.decode(value),
    responseSerialize: (value: GetUsersResponse): Buffer => Buffer.from(GetUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUsersResponse => GetUsersResponse.decode(value),
  },
  getUser: {
    path: "/user.UserService/GetUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserRequest): Buffer => Buffer.from(GetUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUserRequest => GetUserRequest.decode(value),
    responseSerialize: (value: GetUserResponse): Buffer => Buffer.from(GetUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserResponse => GetUserResponse.decode(value),
  },
  getCustomers: {
    path: "/user.UserService/GetCustomers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PaginatedRequestWithOrg): Buffer =>
      Buffer.from(PaginatedRequestWithOrg.encode(value).finish()),
    requestDeserialize: (value: Buffer): PaginatedRequestWithOrg => PaginatedRequestWithOrg.decode(value),
    responseSerialize: (value: GetUsersResponse): Buffer => Buffer.from(GetUsersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUsersResponse => GetUsersResponse.decode(value),
  },
  getCustomer: {
    path: "/user.UserService/GetCustomer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCustomerRequest): Buffer => Buffer.from(GetCustomerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetCustomerRequest => GetCustomerRequest.decode(value),
    responseSerialize: (value: GetUserResponse): Buffer => Buffer.from(GetUserResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUserResponse => GetUserResponse.decode(value),
  },
  getHealth: {
    path: "/user.UserService/GetHealth",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetHealthRequest): Buffer => Buffer.from(GetHealthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetHealthRequest => GetHealthRequest.decode(value),
    responseSerialize: (value: GetHealthResponse): Buffer => Buffer.from(GetHealthResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetHealthResponse => GetHealthResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  getUsers: handleUnaryCall<PaginatedRequest, GetUsersResponse>;
  getUser: handleUnaryCall<GetUserRequest, GetUserResponse>;
  getCustomers: handleUnaryCall<PaginatedRequestWithOrg, GetUsersResponse>;
  getCustomer: handleUnaryCall<GetCustomerRequest, GetUserResponse>;
  getHealth: handleUnaryCall<GetHealthRequest, GetHealthResponse>;
}

export interface UserServiceClient extends Client {
  getUsers(
    request: PaginatedRequest,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getUsers(
    request: PaginatedRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getUsers(
    request: PaginatedRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getUser(
    request: GetUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getCustomers(
    request: PaginatedRequestWithOrg,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getCustomers(
    request: PaginatedRequestWithOrg,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getCustomers(
    request: PaginatedRequestWithOrg,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUsersResponse) => void,
  ): ClientUnaryCall;
  getCustomer(
    request: GetCustomerRequest,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getCustomer(
    request: GetCustomerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getCustomer(
    request: GetCustomerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUserResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
  getHealth(
    request: GetHealthRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetHealthResponse) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
