// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: paginated.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "paginated";

export interface PaginatedRequest {
  limit: number;
  page: number;
}

export interface PaginatedRequestWithOrg {
  limit: number;
  page: number;
  orgId: string;
}

function createBasePaginatedRequest(): PaginatedRequest {
  return { limit: 0, page: 0 };
}

export const PaginatedRequest: MessageFns<PaginatedRequest> = {
  encode(message: PaginatedRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginatedRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginatedRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginatedRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
    };
  },

  toJSON(message: PaginatedRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    return obj;
  },

  create(base?: DeepPartial<PaginatedRequest>): PaginatedRequest {
    return PaginatedRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaginatedRequest>): PaginatedRequest {
    const message = createBasePaginatedRequest();
    message.limit = object.limit ?? 0;
    message.page = object.page ?? 0;
    return message;
  },
};

function createBasePaginatedRequestWithOrg(): PaginatedRequestWithOrg {
  return { limit: 0, page: 0, orgId: "" };
}

export const PaginatedRequestWithOrg: MessageFns<PaginatedRequestWithOrg> = {
  encode(message: PaginatedRequestWithOrg, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.orgId !== "") {
      writer.uint32(26).string(message.orgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginatedRequestWithOrg {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginatedRequestWithOrg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginatedRequestWithOrg {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      orgId: isSet(object.orgId) ? globalThis.String(object.orgId) : "",
    };
  },

  toJSON(message: PaginatedRequestWithOrg): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    return obj;
  },

  create(base?: DeepPartial<PaginatedRequestWithOrg>): PaginatedRequestWithOrg {
    return PaginatedRequestWithOrg.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaginatedRequestWithOrg>): PaginatedRequestWithOrg {
    const message = createBasePaginatedRequestWithOrg();
    message.limit = object.limit ?? 0;
    message.page = object.page ?? 0;
    message.orgId = object.orgId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
